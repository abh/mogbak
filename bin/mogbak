#!/usr/bin/env ruby
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'mogbak_version'
require 'mogile_backup_full.rb'
require 'mogile_backup_incremental.rb'
require 'active_record'
require 'awesome_print'
require "mogilefs"
require('sqlite3')

include GLI
program_desc 'Backup a mogilefs domain to the filesystem.  mogbak needs SELECT access to your MogileFS tracker database, which must
currently be MySQL.'

version Mogbak::VERSION

desc 'Create a new full backup of a MogileFS domain'
arg_name '[backup_path]'
command :create do |c|
  c.desc 'tracker ip'
  c.default_value '127.0.0.1'
  c.flag :trackerip

  c.desc 'tracker port'
  c.default_value 7001
  c.flag :trackerport

  c.desc 'mogilefs domain'
  c.default_value 'test'
  c.flag :domain


  c.desc 'mysql db server host'
  c.default_value 'localhost'
  c.flag :dbhost

  c.desc 'mysql db server port'
  c.default_value 3306
  c.flag :dbport

  c.desc 'database name'
  c.default_value 'mogilefs'
  c.flag :db

  c.desc 'database user'
  c.default_value 'mogile'
  c.flag :dbuser

  c.desc 'database password (REQUIRED)'
  c.flag :dbpass

  c.desc "don't start the backup"
  c.switch ['no-bak']


  c.action do |global_options, options, args|

    #required options and arguments
    raise '--dbpass is required' unless options[:dbpass]
    raise '[backup_path] is required see mogadm - see: mogbak help create' unless args[0]

    mog = MogileBackupFull.new(:tracker_ip => options[:trackerip],
                           :tracker_port => options[:trackerport],
                           :domain => options[:domain],
                           :db_host => options[:dbhost],
                           :db_port => options[:dbport],
                           :db => options[:db],
                           :db_user => options[:dbuser],
                           :db_pass => options[:dbpass],
                           :backup_path => args[0])
    mog.backup(:no_delete => true) unless options[:"no-bak"]
  end
end

desc 'Start an incremental backup using an existing full backup'
arg_name '[backup_path]'
command :incremental do |c|
  c.desc 'do not remove deleted files from the backup (faster)'
  c.switch ['no-delete']

  c.action do |global_options, options, args|
    raise '[backup_path] is required - see: mogbak help incremental' unless args[0]
    mog = MogileBackupIncremental.new(args[0])
    mog.backup(:no_delete => options[:"no-delete"])
  end

end

on_error do |exception|
  # Error logic here
  puts exception
  puts ''
  puts 'Backtrace:'
  puts exception.backtrace
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
